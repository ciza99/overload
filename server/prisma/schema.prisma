// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  username      String         @unique
  email         String         @unique
  password      String
  birthDate     DateTime?
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  expiresIn DateTime
  isRevoked Boolean  @default(false)
}

model TemplateGroup {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  templates Template[]
  order     Int        @default(autoincrement())
}

model Template {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String
  templateGroup   TemplateGroup @relation(fields: [templateGroupId], references: [id])
  templateGroupId Int
  trainings       Training[]
  order           Int           @default(autoincrement())
}

model Training {
  id         Int                @id @default(autoincrement())
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  name       String
  template   Template           @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int
  exercises  TrainingExercise[]
  order      Int                @default(autoincrement())
}

model TrainingExercise {
  id         Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  name       String
  training   Training      @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId Int
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
  sets       ExerciseSet[]
  order      Int           @default(autoincrement())
}

model ExerciseSet {
  id                 Int              @id @default(autoincrement())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  weight             Float
  reps               Int
  trainingExercise   TrainingExercise @relation(fields: [trainingExerciseId], references: [id], onDelete: Cascade)
  trainingExerciseId Int
  order              Int              @default(autoincrement())
}

model Exercise {
  id        Int                @id @default(autoincrement())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  name      String
  bodyParts ExerciseBodyPart[]
  trainingExercises TrainingExercise[]
}

model ExerciseBodyPart {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  bodyPart   BodyPart @relation(fields: [bodyPartId], references: [id])
  bodyPartId Int
}

model BodyPart {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             String
  ExerciseBodyPart ExerciseBodyPart[]
}
