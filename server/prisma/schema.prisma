// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  username       String          @unique
  email          String          @unique
  password       String
  birthDate      DateTime?
  refreshTokens  RefreshToken[]
  templateGroups TemplateGroup[]
  templates      Template[]
  sessionLogs    SessionLog[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  expiresIn DateTime
  isRevoked Boolean  @default(false)
}

model TemplateGroup {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  templates Template[]
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  order     Int        @default(autoincrement())
}

model Template {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  name            String
  templateGroup   TemplateGroup @relation(fields: [templateGroupId], references: [id])
  templateGroupId Int
  sessions        Session[]
  order           Int           @default(autoincrement())
}

model Session {
  id         Int               @id @default(autoincrement())
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  name       String
  template   Template          @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId Int
  exercises  SessionExercise[]
  order      Int               @default(autoincrement())
}

model SessionExercise {
  id         Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  session    Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId  Int
  exercise   Exercise      @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
  sets       ExerciseSet[]
  order      Int           @default(autoincrement())
}

model ExerciseSet {
  id                Int             @id @default(autoincrement())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  weight            Float?
  reps              Int?
  sessionExercise   SessionExercise @relation(fields: [sessionExerciseId], references: [id], onDelete: Cascade)
  sessionExerciseId Int
  order             Int             @default(autoincrement())
}

model Exercise {
  id                  Int                  @id @default(autoincrement())
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  name                String
  bodyParts           ExerciseBodyPart[]
  sessionExercises    SessionExercise[]
  sessionExerciseLogs SessionExerciseLog[]
}

model ExerciseBodyPart {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId Int
  bodyPart   BodyPart @relation(fields: [bodyPartId], references: [id])
  bodyPartId Int
}

model BodyPart {
  id               Int                @id @default(autoincrement())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  name             String
  ExerciseBodyPart ExerciseBodyPart[]
}

model SessionLog {
  id        Int                  @id @default(autoincrement())
  user      User                 @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  startedAt DateTime
  endedAt   DateTime
  sessionId Int
  exercises SessionExerciseLog[]
  order     Int                  @default(autoincrement())
}

model SessionExerciseLog {
  id         Int              @id @default(autoincrement())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  session    SessionLog       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId  Int
  exercise   Exercise         @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId Int
  order      Int              @default(autoincrement())
  sets       ExerciseSetLog[]
}

model ExerciseSetLog {
  id                Int                @id @default(autoincrement())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  weight            Float?
  reps              Int?
  sessionExercise   SessionExerciseLog @relation(fields: [sessionExerciseId], references: [id], onDelete: Cascade)
  sessionExerciseId Int
  order             Int                @default(autoincrement())
}
